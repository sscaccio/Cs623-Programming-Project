import psycopg2
from tabulate import tabulate


def deletedatabase():
    cur.execute("""DROP TABLE IF EXISTS stock;""")
    cur.execute("""DROP TABLE IF EXISTS product;""")
    cur.execute("""DROP TABLE IF EXISTS depot;""")


def setupdatabase():
    cur.execute(
        """CREATE TABLE product(prodid varchar(100), pname varchar(100), price int);""")
    cur.execute(
        """INSERT INTO product(prodid, pname, price) VALUES ('p1', 'tape', 2.5), ('p2', 'tv', 250), ('p3', 'vcr', 80);""")
    cur.execute(
        """ALTER TABLE product ADD CONSTRAINT primary_product PRIMARY KEY (prodid);""")

    cur.execute(
        """CREATE TABLE depot(depid varchar(100), addr varchar(100), volume int);""")
    cur.execute("""INSERT INTO depot(depid, addr, volume) VALUES ('d1', 'New York', 9000), ('d2', 'Syracuse', 6000), ('d4', 'New York', 2000);""")
    cur.execute(
        """ALTER TABLE depot ADD CONSTRAINT primary_depot PRIMARY KEY (depid);""")

    cur.execute(
        """CREATE TABLE Stock(prodid varchar(100), depid varchar(100), quantity int);""")
    cur.execute("""INSERT INTO stock(prodid, depid, quantity) VALUES('p1', 'd1', 1000),
     ('p1', 'd2', -100), ('p1', 'd4', 1200), ('p3', 'd1', 3000), ('p3', 'd4', 2000), ('p2', 'd4', 1500), ('p2', 'd1', -400), ('p2', 'd2', 2000);""")
    cur.execute(
        """ALTER TABLE stock ADD CONSTRAINT fk_stock_depid_depot FOREIGN KEY (depid) REFERENCES Depot(depid);""")


print("Please Work")

con = psycopg2.connect(
    host="localhost",
    database="postgres",
    user="postgres",
    password="sunflower13")


con.set_isolation_level(3)

con.autocommit = False

try:
    cur = con.cursor()
    deletedatabase()
    setupdatabase()

    cur.execute("""ALTER TABLE Stock DROP CONSTRAINT fk_stock_depid_depot""")
    cur.execute("""UPDATE Depot SET depid = 'dd1' where depid = 'd1'""")

    cur.execute("""SELECT * FROM depot;""")
    print(cur.fetchall())

    cur.execute("""SELECT * FROM stock;""")
    print(cur.fetchall())


except (Exception, psycopg2.DatabaseError) as err:
    print(err)
    print("""Revert to position prior to transaction rolllout""")
    con.rollback()
finally:
    if con:
        con.commit()
        cur.close
        con.close
        print("Connection Complete")

print("Success")